[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "multiscale_spatial_image"
description = "Generate a multiscale, chunked, multi-dimensional spatial image data structure that can be serialized to OME-NGFF."
authors = [{name = "Matt McCormick", email = "matt@mmmccormick.com"}]
readme = "README.md"
license.file = "LICENSE"
home-page = "https://github.com/spatial-image/multiscale-spatial-image"
classifiers = [
   "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
   ]
keywords = [
    "itk",
    "ngff",
    "ome",
    "zarr",
    "dask",
    "imaging",
    "visualization"
]
dynamic = ["version"]

requires-python = ">=3.10"
dependencies = [
    "numpy",
    "dask",
    "python-dateutil",
    "spatial_image>=0.2.1",
    "xarray>=2024.10.0",
    "zarr",
]

[project.urls]
Home = "https://github.com/spatial-image/multiscale-spatial-image"
Source = "https://github.com/spatial-image/multiscale-spatial-image"
Issues = "https://github.com/spatial-image/multiscale-spatial-image"

[project.optional-dependencies]
test = [
    "itk-filtering>=5.3.0",
    "dask_image",
    "jsonschema",
    "pooch",
    "pytest",
    "pytest-mypy",
    "fsspec",
    "ipfsspec",
    "urllib3",
    "nbmake",
]

itk = [
    "itk-filtering>=5.3.0",
]
dask-image = [
    "dask-image",
]
imagej = [
  "pyimagej",
]
notebooks = ["matplotlib>=3.9.2,<4", "ome-types>=0.5.1.post1,<0.6", "tqdm>=4.66.4,<5"]

[tool.black]
line-length = 88

[tool.hatch.version]
path = "multiscale_spatial_image/__about__.py"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[tool.pixi.pypi-dependencies]
multiscale-spatial-image = { path = ".", editable = true }

[tool.pixi.tasks]

[tool.pixi.environments]
default = { solve-group = "default" }
test = { features = ["test", "dask-image", "itk"], solve-group = "default" }
notebooks = { features = ["test", "dask-image", "itk", "imagej", "notebooks"], solve-group = "default" }
data = { features = ["data"], no-default-feature = true, solve-group = "default" }
lint = { features = ["lint"], no-default-feature = true, solve-group = "default" }

[tool.pixi.feature.test.tasks]
test = { cmd = "pytest", description = "Run the test suite" }

[tool.pixi.feature.test.dependencies]
python = "3.10.*"

[tool.pixi.feature.notebooks.dependencies]
openjdk = "8.*"
maven = ">=3.9.8,<3.10"
jupyterlab = ">=4.2.4,<4.3"
python = "3.10.*"

[tool.pixi.feature.notebooks.tasks]
init-imagej = { cmd = "python3 -c \"import imagej; ij = imagej.init('2.15.0'); print(ij.getVersion())\"", description = "Initialize the python imagej installation" }
test-notebooks = { cmd = "pytest --nbmake --nbmake-timeout=3000 examples/ConvertImageioImageResource.ipynb examples/ConvertITKImage.ipynb examples/ConvertPyImageJDataset.ipynb examples/ConvertTiffFile.ipynb examples/HelloMultiscaleSpatialImageWorld.ipynb", depends-on = ["init-imagej"], description = "Test the notebooks" }
dev-notebooks = { cmd = "jupyter lab examples", description = "Start Jupyter Lab" }

[tool.pixi.feature.data.dependencies]
python = ">=3.10.0,<4"
pooch = ">=1.8.2,<2"

[tool.pixi.feature.data.tasks]
hash-data = { cmd = "tar cvf ../data.tar * && gzip -9 -f ../data.tar && echo 'New SHA256:' && python3 -c 'import pooch; print(pooch.file_hash(\"../data.tar.gz\"))'", cwd = "test/data", description = "Update the testing data tarball and get its sha256 hash" }

[tool.pixi.feature.lint.dependencies]
pre-commit = "*"

[tool.pixi.feature.lint.tasks]
pre-commit-install = { cmd = "pre-commit install", description = "Install pre-commit hooks" }
pre-commit-run = { cmd = "pre-commit run --all", description = "Run pre-commit hooks on all repository files" }
lint = { depends-on = ["pre-commit-run"], description = "Run linters" }
